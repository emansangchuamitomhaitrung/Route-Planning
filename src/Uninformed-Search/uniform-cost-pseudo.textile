path_cost <- distance * 1500 + toll

function UNIFORM-COST-SEARCH(start(node), goal(node)) returns a solution, or failure
	start(node) <- a node with start(node).name = name, start(node).parent = None, path_cost = 0
	frontier <- a priority queue ordered by path_cost, with Node as the only element
	visited <- an empty set

	while loop do
		if EMPTY?(frontier) then return failure
		node <- POP(frontier)  // chooses the lowest-cost node in frontier
		if node is goal then 
			return SOLUTION(node)
		add node to visited
		for each child in successor(node) do 
			path_cost += path_cost(node)
			if child is not in visited or child is not in frontier then
					frontier <- INSERT(child, frontier)
			else if child is in frontier with higher path_cost then  
				replace that frontier node with child  




